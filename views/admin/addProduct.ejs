<%-include("../../views/partials/adminPartial/header")%>

<style>
  body {
    background-color: #0f172a;
    color: #f1f5f9;
    font-family: 'Segoe UI', sans-serif;
  }

  .form-control {
    background-color: #f8fafc;
    border: none;
    border-radius: 6px;
    padding: 10px 12px;
  }

  .form-control:focus {
    background-color: #f8fafc;
    box-shadow: none;
    border-color: #38bdf8;
  }

  .form-label {
    color: #f1f5f9;
    margin-bottom: 8px;
    font-weight: 500;
  }

  .btn-submit {
    background-color: #2dd4bf;
    color: #0f172a;
    border: none;
    padding: 8px 20px;
    border-radius: 6px;
  }

  .btn-submit:hover {
    background-color: #14b8a6;
  }

  .category-image-box {
    width: 160px;
    height: 160px;
    background-color: #cbd5e1;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #475569;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .category-image-box:hover {
    background-color: #94a3b8;
  }

  .product-form {
    max-width: 900px;
    margin: 0 auto;
  }
</style>

<div class="product-form">
  <form name="productForm" id="productForm" action="/admin/add-product" method="POST" enctype="multipart/form-data">
    <div class="row mb-4">
      <div class="col-12 col-md-6">
        <div class="mb-3">
          <label class="form-label">Product Name:</label>
          <p id="name-error"></p>
          <input type="text" class="form-control" id="name" name="name" required pattern="^[A-Za-z ]+$"
            title="Only alphabets and spaces allowed." />
        </div>

        <div class="mb-3">
          <label class="form-label">Product Description:</label>
          <p id="description-error"></p>
          <textarea class="form-control" id="description" name="description" rows="3" required pattern="^[A-Za-z ]+$"
            title="Only alphabets and spaces allowed."></textarea>
        </div>

        <div class="mb-3">
          <label class="form-label">Product Category:</label>
          <p id="category-error"></p>
          <select class="form-select" id="category" name="category" required>
            <option value="" selected disabled>Select categories</option>
            <% categories.forEach(category => { %>
              <option value="<%= category.name %>">
                <%= category.name %>
              </option>
            <% }) %>
          </select>
        </div>

        <div class="mb-3">
          <label class="form-label">Offer (%):</label>
          <p id="offer-error"></p>
          <input type="number" class="form-control" id="offer" name="offer" min="0" max="99" placeholder="Optional" />
        </div>
        <div class="mb-3">
          <label class="form-label">Price</label>
          <p id="price-error"></p>
          <input type="number" class="form-control" id="price" name="price" min="0"
            placeholder="Greater than SalesPrice" />
        </div>
        <div class="mb-3">
          <label class="form-label">Sales Price</label>
          <p id="salesPrice-error"></p>
          <input type="number" class="form-control" id="salesPrice" name="salesPrice" min="1"
            placeholder="Enter the salesPrice" />
        </div>
        <div class="mb-3">
          <label class="form-label">Size</label>
          <p id="Size-error"></p>
          <input type="text" class="form-control" id="size" name="Size" min="1" placeholder="Enter the Size" />
        </div>
        <div class="mb-3">
          <label class="form-label">Stock</label>
          <p id="Stock-error"></p>
          <input type="number" class="form-control" id="stock" name="Stock" min="0" placeholder="Enter the Stock" />
        </div>
      </div>
    </div>

    <!-- Image Upload Section -->
    <div class="image-upload-container">
      <% for (let i = 1; i <= 4; i++) { %>
        <div class="image-upload-group" id="images">
          <label for="image<%= i %>">Image <%= i %></label>
          <input type="file" name="image<%= i %>" id="image<%= i %>" class="form-control" accept=".jpg, .jpeg, .png"
            onchange="previewImage(event, <%= i %>)">
          <img id="preview<%= i %>" src="#" alt="Image preview" class="image-preview" style="display: none;">
          <button type="button" class="btn btn-primary mt-2" onclick="cropImage(<%= i %>)">Save Image <%= i %></button>
          <div id="image<%= i %>-error" class="error-message"></div>
          <div class="croppedPreview<%= i %>"></div>
        </div>
      <% } %>
    </div>

    <button type="submit" class="btn btn-submit">ADD PRODUCT</button>
  </form>
</div>

<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://unpkg.com/cropperjs@1.6.1/dist/cropper.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/cropperjs@1.6.1/dist/cropper.min.css">
<script src="https://unpkg.com/sweetalert2@11"></script>

<script>
  function clearErrorMessages() {
    const errorElements = document.querySelectorAll(".error-message");
    errorElements.forEach((el) => (el.textContent = ""));
  }

  function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
      errorElement.textContent = message;
      errorElement.style.color = "#ef4444";
    }
  }

  function validateForm() {
    clearErrorMessages();
    const name = document.getElementById("name").value.trim();
    const description = document.getElementById("description").value.trim();
    const offer = document.getElementById("offer").value.trim();
    const price = document.getElementById("price").value.trim();
    const salesPrice = document.getElementById("salesPrice").value.trim();
    const category = document.getElementById("category").value;
    const size = document.getElementById("size").value.trim();
    const stock = document.getElementById("stock").value.trim();
    const form = document.getElementById("productForm");

    const namePattern = /^[A-Za-z ]+$/;
    const numberPattern = /^\d+(\.\d{1,2})?$/;

    let isValid = true;

    if (!name) {
      displayErrorMessage("name-error", "Please enter a product name");
      isValid = false;
    } else if (!namePattern.test(name)) {
      displayErrorMessage("name-error", "Product name should contain only alphabets and spaces");
      isValid = false;
    }

    if (!description) {
      displayErrorMessage("description-error", "Please enter a product description");
      isValid = false;
    } else if (!namePattern.test(description)) {
      displayErrorMessage("description-error", "Product description should contain only alphabets and spaces");
      isValid = false;
    }

    if (offer && (isNaN(offer) || offer < 0 || offer > 99)) {
      displayErrorMessage("offer-error", "Offer should be a number between 0 and 99");
      isValid = false;
    }

    if (!price) {
      displayErrorMessage("price-error", "Please enter a price");
      isValid = false;
    } else if (!numberPattern.test(price) || parseFloat(price) < 0) {
      displayErrorMessage("price-error", "Please enter a valid non-negative price");
      isValid = false;
    }

    if (salesPrice && (!numberPattern.test(salesPrice) || parseFloat(salesPrice) < 0)) {
      displayErrorMessage("salesPrice-error", "Please enter a valid non-negative sales price");
      isValid = false;
    }

    if (price && salesPrice && parseFloat(price) <= parseFloat(salesPrice)) {
      displayErrorMessage("price-error", "Regular price must be greater than sales price");
      isValid = false;
    }

    if (!category) {
      displayErrorMessage("category-error", "Please select a category");
      isValid = false;
    }
    if (!size) {
      displayErrorMessage("size-error", "Please enter proper Size");
      isValid = false;
    }
    if (!stock) {
      displayErrorMessage("stock-error", "Please enter the number");
      isValid = false;
    }

    for (let i = 1; i <= 4; i++) {
      const imageInput = document.getElementById(`image${i}`);
      imageInput.disabled = true; // Disable original image inputs
    }

    let imageUploaded = false;
    for (let i = 1; i <= 4; i++) {
      const croppedPreview = document.querySelector(`.croppedPreview${i} img`);
      if (croppedPreview && croppedPreview.src) {
        imageUploaded = true;
        break;
      }
    }
    if (!imageUploaded) {
      Swal.fire({
        title: "Error!",
        text: "Please upload and crop at least one product image.",
        icon: "error",
        confirmButtonText: "OK",
      });
      isValid = false;
    }

    return isValid;
  }

  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("productForm");

    form.addEventListener("submit", async function (event) {
      event.preventDefault();

      if (validateForm()) {
        const formData = new FormData(form);

        for (let i = 1; i <= 4; i++) {
          const croppedInput = document.getElementById(`cropped-image-${i}`);
          if (croppedInput && croppedInput.value) {
            const blob = dataURLtoBlob(croppedInput.value);
            formData.append(`image${i}`, blob, `image${i}.jpg`);
          }
        }

        try {
          const resp = await axios.post("/admin/add-product", formData, {
            headers: {
              "Content-Type": "multipart/form-data",
            },
          });

          const data = resp.data;
          if (data.success) {
            Swal.fire({
              title: "Success!",
              text: data.message,
              icon: "success",
              confirmButtonText: "OK",
            }).then((result) => {
              window.location.href = data.url;
            });
          } else {
            Swal.fire({
              title: "Error!",
              text: data.message || "Something went wrong",
              icon: "error",
              confirmButtonText: "OK",
            });
          }
        } catch (err) {
          console.error("Axios Error:", err);
          Swal.fire({
            title: "Error!",
            text: "Failed to add product. Please try again.",
            icon: "error",
            confirmButtonText: "OK",
          });
        }
      }
    });
  });

  function dataURLtoBlob(dataURL) {
    const arr = dataURL.split(",");
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: mime });
  }

  let croppers = [];
  function previewImage(event, index) {
    const input = event.target;
    const file = input.files[0];

    // Define allowed file types
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];

    if (file) {
      console.log(`File selected for image${index}:`, file.name);

      // Check if the file type is allowed
      if (!allowedTypes.includes(file.type)) {
        Swal.fire({
          title: 'Error!',
          text: 'Only JPG, JPEG, and PNG images are allowed.',
          icon: 'error',
          confirmButtonText: 'OK'
        });

        // Clear the input
        input.value = '';
        const preview = document.getElementById(`preview${index}`);
        preview.style.display = 'none';
        if (croppers[index]) {
          croppers[index].destroy();
          croppers[index] = null;
        }
        return;
      }

      const reader = new FileReader();
      reader.onload = function (e) {
        const preview = document.getElementById(`preview${index}`);
        if (!preview) {
          console.error(`Preview element for index ${index} not found.`);
          return;
        }

        preview.src = e.target.result;
        preview.style.display = "block";

        preview.onload = function () {
          try {
            if (croppers[index]) {
              croppers[index].destroy();
            }

            croppers[index] = new Cropper(preview, {
              aspectRatio: 1,
              viewMode: 1,
              autoCropArea: 0.8,
              movable: true,
              zoomable: true,
              scalable: true,
              rotatable: true,
              ready: function () {
                console.log(`Cropper initialized for image ${index}`);
              },
            });
          } catch (error) {
            console.error(`Error initializing Cropper for image ${index}:`, error);
            Swal.fire({
              title: "Error!",
              text: "Failed to initialize image cropper.",
              icon: "error",
              confirmButtonText: "OK",
            });
          }
        };

        preview.onerror = function () {
          console.error(`Error loading image for preview${index}`);
          Swal.fire({
            title: "Error!",
            text: "Failed to load the image for cropping.",
            icon: "error",
            confirmButtonText: "OK",
          });
        };
      };
      reader.readAsDataURL(file);
    } else {
      console.log(`No file selected for image${index}`);
    }
  }

  function cropImage(index) {
    if (!croppers[index]) {
      Swal.fire({
        title: "Error!",
        text: "Please select an image first.",
        icon: "error",
        confirmButtonText: "OK",
      });
      return;
    }

    try {
      const canvas = croppers[index].getCroppedCanvas({
        width: 800,
        height: 800,
        imageSmoothingEnabled: true,
        imageSmoothingQuality: "high",
      });

      if (!canvas) {
        throw new Error("Failed to crop the image.");
      }

      const croppedImageUrl = canvas.toDataURL("image/jpeg", 0.9);
      const croppedPreviewContainer = document.querySelector(`.croppedPreview${index}`);

      if (!croppedPreviewContainer) {
        console.error(`Container .croppedPreview${index} not found`);
        return;
      }

      croppedPreviewContainer.innerHTML = "";

      const croppedPreview = document.createElement("img");
      croppedPreview.className = "cropped-preview";
      croppedPreview.src = croppedImageUrl;
      croppedPreview.style.display = "block";
      croppedPreview.setAttribute("data-image-url", croppedImageUrl);

      croppedPreviewContainer.appendChild(croppedPreview);

      let hiddenInput = document.getElementById(`cropped-image-${index}`);
      if (!hiddenInput) {
        hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.id = `cropped-image-${index}`;
        hiddenInput.name = `croppedImage${index}`;
        document.forms["productForm"].appendChild(hiddenInput);
      }
      hiddenInput.value = croppedImageUrl;

      Swal.fire({
        title: "Success!",
        text: "Image cropped successfully.",
        icon: "success",
        confirmButtonText: "OK",
      });
    } catch (error) {
      console.error(`Error cropping image ${index}:`, error);
      Swal.fire({
        title: "Error!",
        text: "Failed to crop the image.",
        icon: "error",
        confirmButtonText: "OK",
      });
    }
  }
</script>