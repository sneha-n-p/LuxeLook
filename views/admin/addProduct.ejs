<%-include("../../views/partials/adminPartial/header")%>

  <style>
    body {
      background-color: #0f172a;
      color: #f1f5f9;
      font-family: 'Segoe UI', sans-serif;
    }

    .form-control {
      background-color: #f8fafc;
      border: none;
      border-radius: 6px;
      padding: 10px 12px;
    }

    .form-control:focus {
      background-color: #f8fafc;
      box-shadow: none;
      border-color: #38bdf8;
    }

    .form-label {
      color: #f1f5f9;
      margin-bottom: 8px;
      font-weight: 500;
    }

    .btn-submit {
      background-color: #2dd4bf;
      color: #0f172a;
      border: none;
      padding: 8px 20px;
      border-radius: 6px;
    }

    .btn-submit:hover {
      background-color: #14b8a6;
    }

    .category-image-box {
      width: 160px;
      height: 160px;
      background-color: #cbd5e1;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #475569;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .category-image-box:hover {
      background-color: #94a3b8;
    }

    .product-form {
      max-width: 900px;
      margin: 0 auto;
    }

    .image-preview {
      max-width: 150px;
      max-height: 150px;
      margin-top: 10px;
      border-radius: 8px;
      object-fit: cover;
      box-shadow: 0 0 6px rgba(0, 0, 0, 0.3);
    }

    .error-message {
      color: #ef4444;
      font-size: 0.75rem;
      margin-bottom: 8px;
      display: none;
    }
  </style>

  <div class="product-form">
    <form name="productForm" id="add-productForm" action="/admin/add-product" method="POST"
      enctype="multipart/form-data">
      <div class="row mb-4">
        <div class="col-12 col-md-6">
          <div class="mb-3">
            <label class="form-label">Product Name:</label>
            <div id="name-error" class="error-message"></div>
            <input type="text" class="form-control" id="name" name="ProductName" required pattern="^[A-Za-z ]+$"
              title="Only alphabets and spaces allowed." />
          </div>

          <div class="mb-3">
            <label class="form-label">Product Description:</label>
            <div id="description-error" class="error-message"></div>
            <textarea class="form-control" id="description" name="description" rows="3" required pattern="^[A-Za-z ]+$"
              title="Only alphabets and spaces allowed."></textarea>
          </div>

          <div class="mb-3">
            <label class="form-label">Product Category:</label>
            <div id="category-error" class="error-message"></div>
            <select class="form-select" id="category" name="category" required>
              <option value="" selected disabled>Select categories</option>
              <% categories.forEach(category=> { %>
                <option value="<%= category.name %>">
                  <%= category.name %>
                </option>
                <% }) %>
            </select>
          </div>

          <div class="mb-3">
            <label class="form-label">Offer (%):</label>
            <div id="offer-error" class="error-message"></div>
            <input type="number" class="form-control" id="offer" name="offer" min="0" max="99" placeholder="Optional" />
          </div>

          <div class="mb-3">
            <label class="form-label">Price</label>
            <div id="price-error" class="error-message"></div>
            <input type="number" class="form-control" id="price" name="price" min="0"
              placeholder="Greater than SalesPrice" required />
          </div>

          <div class="mb-3">
            <label class="form-label">Sales Price</label>
            <div id="salesPrice-error" class="error-message"></div>
            <input type="number" class="form-control" id="salesPrice" name="salesPrice" min="0"
              placeholder="Less than Price" required />
          </div>

          <div class="mb-3" id="variant-section">
            <label class="form-label">Product Variants:</label>
            <div id="variant-container">
              <div class="variant-row d-flex gap-2 mb-2">
                <div>
                  <div id="variantSize-error-0" class="error-message"></div>
                  <input type="text" id="variant-size" name="variantSize[]" class="form-control" placeholder="Size"
                    required />
                </div>
                <div>
                  <div id="variantSalePrice-error-0" class="error-message"></div>
                  <input type="number" id="variant-salePrice" name="variantSalePrice[]" class="form-control"
                    placeholder="Sale Price" required />
                </div>
                <div>
                  <div id="variantQuantity-error-0" class="error-message"></div>
                  <input type="number" id="variant-quantity" name="variantQuantity[]" class="form-control"
                    placeholder="Quantity" required />
                </div>
                <button type="button" class="btn btn-danger" onclick="removeVariant(this)">âœ–</button>
              </div>
            </div>
            <button type="button" class="btn btn-secondary mt-2" onclick="addVariant()">+ Add Variant</button>
          </div>
        </div>
      </div>

      <!-- Image Upload Section -->
      <div class="image-upload-container">
        <% for (let i=1; i <=4; i++) { %>
          <div class="image-upload-group" id="images">
            <label for="image<%= i %>">Image <%= i %></label>
            <div id="image<%= i %>-error" class="error-message"></div>
            <input type="file" name="image<%= i %>" id="image<%= i %>" class="form-control" accept=".jpg, .jpeg, .png"
              onchange="previewImage(event, <%= i %>)">
            <img id="preview<%= i %>" src="#" alt="Image preview" class="image-preview" style="display: none;">
            <button type="button" class="btn btn-primary mt-2" onclick="cropImage(<%= i %>)">Save Image <%= i %>
                </button>
            <div class="croppedPreview<%= i %>"></div>
          </div>
          <% } %>
      </div>

      <button type="submit" class="btn btn-submit">ADD PRODUCT</button>
    </form>
  </div>

  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://unpkg.com/cropperjs@1.6.1/dist/cropper.min.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/cropperjs@1.6.1/dist/cropper.min.css">
  <script src="https://unpkg.com/sweetalert2@11"></script>

  <script>
    let variantCount = 0;

    function clearErrorMessages() {
      const errorElements = document.querySelectorAll(".error-message");
      errorElements.forEach((el) => {
        el.textContent = "";
        el.style.display = "none";
      });
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = "block";
      }
    }

    function validateForm() {
      clearErrorMessages();
      let isValid = true;

      const name = document.getElementById("name").value.trim();
      console.log(name)
      const description = document.getElementById("description").value.trim();
      const category = document.getElementById("category").value;
      const offer = document.getElementById("offer").value.trim();
      const price = document.getElementById("price").value.trim();
      const salesPrice = document.getElementById("salesPrice").value.trim();

      const namePattern = /^[A-Za-z ]+$/;
      const numberPattern = /^\d+(\.\d{1,2})?$/;

      if (!name) {
        displayErrorMessage("name-error", "Product name is required");
        isValid = false;
      } else if (!namePattern.test(name)) {
        displayErrorMessage("name-error", "Only alphabets and spaces allowed");
        isValid = false;
      }

      if (!description) {
        displayErrorMessage("description-error", "Description is required");
        isValid = false;
      } else if (!namePattern.test(description)) {
        displayErrorMessage("description-error", "Only alphabets and spaces allowed");
        isValid = false;
      }
      if (!category) {
        displayErrorMessage("category-error", "Please select a category");
        isValid = false;
      }
      if (offer) {
        const numOffer = parseInt(offer);
        if (isNaN(numOffer) || numOffer < 0 || numOffer > 99) {
          displayErrorMessage("offer-error", "Offer must be a number between 0 and 99");
          isValid = false;
        }
      }

      if (!price) {
        displayErrorMessage("price-error", "Price is required");
        isValid = false;
      } else if (!numberPattern.test(price) || parseFloat(price) <= 0) {
        displayErrorMessage("price-error", "Enter a valid price greater than 0");
        isValid = false;
      }

      if (!salesPrice) {
        displayErrorMessage("salesPrice-error", "Sales price is required");
        isValid = false;
      } else if (!numberPattern.test(salesPrice) || parseFloat(salesPrice) <= 0) {
        displayErrorMessage("salesPrice-error", "Enter a valid sales price greater than 0");
        isValid = false;
      }

      if (price && salesPrice && parseFloat(price) <= parseFloat(salesPrice)) {
        displayErrorMessage("salesPrice-error", "Price must be greater than sales price");
        isValid = false;
      }

      // Variant validations
      const variantSizes = document.getElementsByName("variantSize[]");
      const variantSalePrices = document.getElementsByName("variantSalePrice[]");
      const variantQuantities = document.getElementsByName("variantQuantity[]");

      for (let i = 0; i < variantSizes.length; i++) {
        const size = variantSizes[i].value.trim();
        const salePrice = variantSalePrices[i].value.trim();
        const quantity = variantQuantities[i].value.trim();

        if (!size) {
          displayErrorMessage(`variantSize-error-${i}`, "Size is required");
          isValid = false;
        }
        if (!salePrice || !numberPattern.test(salePrice) || parseFloat(salePrice) <= 0) {
          displayErrorMessage(`variantSalePrice-error-${i}`, "Valid sale price required");
          isValid = false;
        }
        if (!quantity || isNaN(quantity) || parseInt(quantity) < 0) {
          displayErrorMessage(`variantQuantity-error-${i}`, "Valid quantity required");
          isValid = false;
        }
      }

      let imageUploaded = false;
      for (let i = 1; i <= 4; i++) {
        const croppedPreview = document.querySelector(`.croppedPreview${i} img`);
        if (croppedPreview && croppedPreview.src) {
          imageUploaded = true;
          break;
        }
      }
      if (!imageUploaded) {
        displayErrorMessage("image1-error", "Please upload and crop at image");
        isValid = false;
      }

      return isValid;
    }


    document.addEventListener("DOMContentLoaded", function () {
      const form = document.getElementById("add-productForm")
      form.addEventListener("submit", async function (event) {
        event.preventDefault();

        if (validateForm()) {
          const formData = new FormData(form);

          for (let i = 1; i <= 4; i++) {
            const croppedInput = document.getElementById(`cropped-image-${i}`);
            if (croppedInput && croppedInput.value) {
              formData.delete(`image${i}`);

              const blob = dataURLtoBlob(croppedInput.value);
              formData.append(`image${i}`, blob, `cropped-${Date.now()}-${i}.jpg`);
            }
          }

          try {
            const resp = await axios.post("/admin/add-product", formData, {
              headers: {
                "Content-Type": "multipart/form-data",
              },
            });

            const data = resp.data
            if (data.success) {
              Swal.fire({
                title: "Success!",
                text: data.message,
                icon: "success",
                confirmButtonText: "OK",
              }).then((result) => {
                window.location.href = data.url;
              });
            } else {
              Swal.fire({
                title: "Error!",
                text: data.message || "Something went wrong",
                icon: "error",
                confirmButtonText: "OK",
              });
            }
          } catch (err) {
            console.error("Axios Error:", err);
            Swal.fire({
              title: "Error!",
              text: "Failed to add product. Please try again.",
              icon: "error",
              confirmButtonText: "OK",
            });
          }
        }
      });
    });

    function dataURLtoBlob(dataURL) {
      const arr = dataURL.split(",");
      const mime = arr[0].match(/:(.*?);/)[1];
      const bstr = atob(arr[1]);
      let n = bstr.length;
      const u8arr = new Uint8Array(n);
      while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
      }
      return new Blob([u8arr], { type: mime });
    }

    let croppers = [];
    function previewImage(event, index) {
      const input = event.target;
      const file = input.files[0];

      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];

      if (file) {
        if (!allowedTypes.includes(file.type)) {
          displayErrorMessage(`image${index}-error`, "Only JPG, JPEG, and PNG images are allowed");
          input.value = '';
          const preview = document.getElementById(`preview${index}`);
          preview.style.display = 'none';
          if (croppers[index]) {
            croppers[index].destroy();
            croppers[index] = null;
          }
          return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
          const preview = document.getElementById(`preview${index}`);
          if (!preview) {
            console.error(`Preview element for index ${index} not found.`);
            return;
          }

          preview.src = e.target.result;
          preview.style.display = "block";

          preview.onload = function () {
            try {
              if (croppers[index]) {
                croppers[index].destroy();
              }

              croppers[index] = new Cropper(preview, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 0.8,
                movable: true,
                zoomable: true,
                scalable: true,
                rotatable: true,
                ready: function () {
                  console.log(`Cropper initialized for image ${index}`);
                },
              });
            } catch (error) {
              console.error(`Error initializing Cropper for image ${index}:`, error);
              displayErrorMessage(`image${index}-error`, "Failed to initialize image cropper");
            }
          };

          preview.onerror = function () {
            console.error(`Error loading image for preview${index}`);
            displayErrorMessage(`image${index}-error`, "Failed to load the image for cropping");
          };
        };
        reader.readAsDataURL(file);
      }
    }

    function cropImage(index) {
      if (!croppers[index]) {
        displayErrorMessage(`image${index}-error`, "Please select an image first");
        return;
      }

      try {
        const canvas = croppers[index].getCroppedCanvas({
          width: 200,
          height: 200,
          imageSmoothingEnabled: true,
          imageSmoothingQuality: "high",
        });

        if (!canvas) {
          throw new Error("Failed to crop the image.");
        }

        const croppedImageUrl = canvas.toDataURL("image/jpeg", 0.9);
        const croppedPreviewContainer = document.querySelector(`.croppedPreview${index}`);

        if (!croppedPreviewContainer) {
          console.error(`Container .croppedPreview${index} not found`);
          return;
        }

        croppedPreviewContainer.innerHTML = "";

        const croppedPreview = document.createElement("img");
        croppedPreview.className = "cropped-preview";
        croppedPreview.src = croppedImageUrl;
        croppedPreview.style.display = "block";
        croppedPreview.setAttribute("data-image-url", croppedImageUrl);

        croppedPreviewContainer.appendChild(croppedPreview);

        let hiddenInput = document.getElementById(`cropped-image-${index}`);
        if (!hiddenInput) {
          hiddenInput = document.createElement("input");
          hiddenInput.type = "hidden";
          hiddenInput.id = `cropped-image-${index}`;
          hiddenInput.name = `croppedImage${index}`;
          document.forms["productForm"].appendChild(hiddenInput);
        }
        hiddenInput.value = croppedImageUrl;

        Swal.fire({
          title: "Success!",
          text: "Image cropped successfully.",
          icon: "success",
          confirmButtonText: "OK",
        });
      } catch (error) {
        console.error(`Error cropping image ${index}:`, error);
        displayErrorMessage(`image${index}-error`, "Failed to crop the image");
      }
    }

    function addVariant() {
      variantCount++;
      const container = document.getElementById('variant-container');
      const variantRow = document.createElement('div');
      variantRow.className = 'variant-row d-flex gap-2 mb-2';
      variantRow.innerHTML = `
      <div>
        <div id="variantSize-error-${variantCount}" class="error-message"></div>
        <input type="text" name="variantSize[]" class="form-control" placeholder="Size" required />
      </div>
      <div>
        <div id="variantSalePrice-error-${variantCount}" class="error-message"></div>
        <input type="number" name="variantSalePrice[]" class="form-control" placeholder="Sale Price" required />
      </div>
      <div>
        <div id="variantQuantity-error-${variantCount}" class="error-message"></div>
        <input type="number" name="variantQuantity[]" class="form-control" placeholder="Quantity" required />
      </div>
      <button type="button" class="btn btn-danger" onclick="removeVariant(this)">âœ–</button>
    `;
      container.appendChild(variantRow);
    }

    function removeVariant(btn) {
      btn.parentElement.remove();
    }
  </script>