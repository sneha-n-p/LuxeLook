
<%- include("../../views/partials/adminPartial/header") %>

<style>
    body {
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #1a1a1a 0%, #2c2c2c 100%);
        color: #e0e0e0;
        margin: 0;
        padding: 0;
        line-height: 1.6;
    }
    .sidebar {
        width: 220px;
        background: #252525;
        position: fixed;
        height: 100%;
        padding: 20px 0;
        box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
        transition: width 0.3s ease;
    }
    .sidebar a {
        display: flex;
        align-items: center;
        color: #b0b0b0;
        padding: 12px 20px;
        text-decoration: none;
        font-size: 0.95rem;
        transition: all 0.3s ease;
    }
    .sidebar a:hover {
        background: #3a3a3a;
        color: #fff;
        padding-left: 25px;
    }
    .content {
        margin-left: 240px;
        padding: 30px;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .order-details {
        background: #2a2a2a;
        padding: 25px;
        border-radius: 12px;
        max-width: 800px;
        width: 100%;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
        transition: transform 0.2s ease;
    }
    .order-details:hover {
        transform: translateY(-5px);
    }
    .order-details img {
        width: 100%;
        max-width: 180px;
        border-radius: 8px;
        margin-bottom: 15px;
        object-fit: cover;
        border: 1px solid #444;
    }
    .order-details h1, .order-details h2, .order-details h3 {
        color: #fff;
        margin: 0 0 10px;
        font-weight: 600;
    }
    .order-details h2 {
        font-size: 1.4rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    .order-details p {
        margin: 5px 0;
        font-size: 0.95rem;
        color: #c0c0c0;
    }
    .order-details hr {
        border: none;
        border-top: 1px solid #444;
        margin: 15px 0;
    }
    .address-details {
        margin-top: 20px;
        padding: 15px;
        background: #333;
        border-radius: 8px;
        transition: background 0.3s ease;
    }
    .address-details:hover {
    background: #3a3a3a;
}
    .status-timeline {
        margin-top: 25px;
        padding: 15px;
        background: #222;
        border-radius: 8px;
    }
    .status-timeline .status {
        display: flex;
        align-items: flex-start;
        margin-bottom: 15px;
        padding: 10px;
        border-left: 3px solid transparent;
        transition: border-color 0.3s ease;
    }
    .status-timeline .status:hover {
        border-left-color: #00b7eb;
    }
    .status-timeline .dot {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        margin-right: 12px;
        margin-top: 4px;
        flex-shrink: 0;
    }
    .status-timeline .completed { background: #00cc00; box-shadow: 0 0 8px rgba(0, 204, 0, 0.5); }
    .status-timeline .pending { background: #666; }
    .status-timeline p {
        margin: 2px 0;
    }
    .amount-details {
        margin-top: 20px;
        padding: 15px;
        background: #333;
        border-radius: 8px;
        text-align: right;
    }
    .amount-details p {
        margin: 5px 0;
        font-size: 1rem;
    }
    .amount-details p strong {
        color: #fff;
    }
    .update-status {
        background: linear-gradient(90deg, #00b7eb, #0078a8);
        color: #fff;
        border: none;
        padding: 12px 24px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 500;
        margin-top: 20px;
        width: 100%;
        transition: all 0.3s ease;
    }
    .update-status:hover {
        background: linear-gradient(90deg, #00c4ff, #0088c2);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 183, 235, 0.3);
    }
    @media (max-width: 768px) {
        .sidebar {
            width: 80px;
        }
        .content {
            margin-left: 100px;
            padding: 20px;
        }
        .order-details {
            padding: 15px;
        }
    }
</style>
</head>
<body>

<div class="content">
    <h1 style="font-size: 2rem; font-weight: 700; margin-bottom: 30px;">Order Details</h1>

    <div class="order-details">
        <p><strong>Order ID:</strong> #<%= order.orderId %></p>
        <p><strong>Order Date:</strong> <%= new Date(order.createdOn).toLocaleString() %></p>

        <% order.orderedItems.forEach(item => { %>
            <div style="display: flex; align-items: center; gap: 20px; margin-bottom: 15px;">
                <img src="<%= item.productImage %>" alt="<%= item.productName %>">
                <div>
                    <h2><%= item.productName%></h2>
                    <p><strong>Qty:</strong> <%= item.quantity %></p>
                </div>
            </div>
            <hr>
        <% }) %>

        <div class="address-details">
            <h3>Shipping Address</h3>
            <p><strong>Name:</strong> <%= order.address[0].name %></p>
            <p><strong>Address:</strong> <%= order.address[0].streetAddress %>, <%= order.address[0].city %>, <%= order.address[0].state %> - <%= order.address[0].pincode %></p>
            <p><strong>Phone:</strong> <%= order.address[0].phone %></p>
            <p><strong>Address Type:</strong> <%= order.address[0].addressType %></p>
        </div>

        <div class="status-timeline">
            <% 
                const statusTimeline = [
                    { title: 'Order Placed', date: new Date(order.createdOn).toLocaleDateString(), time: new Date(order.createdOn).toLocaleTimeString(), description: 'Your Order has been placed.', completed: ['Pending', 'Shipped', 'Out For Delivery', 'Delivered'].includes(order.status) },
                    { title: 'Shipped', date: '', time: '', description: 'Item has been dispatched.', completed: ['Shipped', 'Out For Delivery', 'Delivered'].includes(order.status) },
                    { title: 'Out For Delivery', date: '', time: '', description: 'Out for delivery.', completed: ['Out For Delivery', 'Delivered'].includes(order.status) },
                    { title: 'Delivered', date: '', time: '', description: 'Delivered to the customer.', completed: order.status === 'Delivered' }
                    ];
            %>
            <% statusTimeline.forEach(status => { %>
                <div class="status">
                    <div class="dot <%= status.completed ? 'completed' : 'pending' %>"></div>
                    <div>
                        <p><strong><%= status.title %></strong></p>
                        <p><%= status.date %> <%= status.time %></p>
                        <p><%= status.description %></p>
                    </div>
                </div>
            <% }) %>
        </div>

        <div class="amount-details">
            <p><strong>Amount</strong></p>
            <p>Subtotal: ₹<%= order.totalPrice.toLocaleString() %></p>
            <p>Discount: ₹<%= order.discount.toLocaleString() %></p>
            <p><strong>Total: ₹<%= order.finalAmount.toLocaleString() %></strong></p>
        </div>

        <% order.orderedItems.forEach(item => { %>
            <% if (item.status === 'Return Request') { %>
                <div style="margin-top: 20px;">
                    <p style="color: #ffb347;"><strong>Return Requested Reason:</strong> <%= item.returnReason %>  <%=order.returnReason%></p>
        
                    <button class="update-status accept-return" onclick="accept('<%= order._id %>','<%= item.product %>')">Accept Return</button>
                    <button class="update-status reject-return" onclick="reject('<%= order._id %>','<%= item.product %>')" style="background: #c0392b;">Reject Return</button>
                </div>
            <% } else if (order.status !== 'Cancelled') { %>
                <% } else { %>
                    <button class="update-status" disabled style="opacity: 0.5; background-color: rgb(131, 48, 48);">Cancelled</button>
                    <% } %>
                    <% }) %>
                    <% if (order.status !== 'Return Request' && order.status !== 'Return' && order.status !== 'Cancelled'&& order.status !== 'Delivered' && order.status !== 'Returned'  ) { %>
                        <button class="update-status" id="updateStatus" data-id="<%= order._id %>">Update Status</button>
                        <input type="text" id="hiddenOID" value="<%= order._id %>" hidden>
                    <% } %>
        
          </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const button = document.getElementById('updateStatus')
    button.addEventListener('click', async () => {
        const orderId = document.getElementById('hiddenOID').value

        if ("<%= order.status %>" === "Delivered") {
            Swal.fire('Not Allowed', 'Delivered orders cannot be updated.', 'warning');
            return;
        }

        const { value: status } = await Swal.fire({
            title: 'Update Order Status',
            input: 'select',
            inputOptions: {
                'Pending': 'Pending',
                'Shipped': 'Shipped',
                'Out For Delivery': 'Out For Delivery',
                'Delivered': 'Delivered',
            },
            inputPlaceholder: 'Select a status',
            showCancelButton: true
        });

        if (status) {
            try {
                const response = await fetch('/admin/update-order-status', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId, newStatus: status })
                });

                const result = await response.json();
                if (result.success) {
                    Swal.fire('Success', result.message, 'success').then(() => location.reload());
                } else {
                    Swal.fire('Error', result.message, 'error');
                }
            } catch (error) {
                console.error('Fetch error:', error);
                Swal.fire('Error', 'Something went wrong!', 'error');
            }
        }
    });


 

function accept(orderId, productId) {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you want to accept the return request?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, accept it!",
        cancelButtonText: "No, cancel",
        reverseButtons: true
    }).then((result) => {
        if (result.isConfirmed) {
            axios.patch('/admin/verify-return', {
                orderId: orderId,
                productId: productId,
                action: 'Returned'
            })
            .then(response => {
                if (response.data.success) {
                    Swal.fire("Accepted!", response.data.message, "success").then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire("Error", response.data.message, "error");
                }
            })
            .catch(error => {
                console.error("AXIOS ERROR:", error.response?.data || error.message);
                Swal.fire("Error", "Something went wrong.", "error");
            });
        }
    });
}


function reject(orderId, productId) {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you want to reject the return request?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, reject it!",
        cancelButtonText: "No, cancel",
        reverseButtons: true
    }).then((result) => {
        if (result.isConfirmed) {
            axios.patch('/admin/verify-return', {
                orderId,
                productId,
                action: 'Delivered'
            })
            .then(response => {
                if (response.data.success) {
                    Swal.fire("Accepted!", response.data.message, "success").then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire("Error", response.data.message, "error");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire("Error", "Something went wong.", "error");
            });
        } else {
            Swal.fire("Cancelled", "Return request was not accepted.", "info");
        }
    });
}

</script>
</body>
</html>
