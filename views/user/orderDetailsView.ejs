<%- include("../../views/partials/userPartial/header") %>

    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #FFF8F3;
        }

        .banner {
            position: relative;
        }

        .banner img {
            height: 577px;
            object-fit: cover;
            width: 100%;
        }

        .banner h1 {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 42px;
            font-weight: 700;
            text-shadow: 2px 2px 8px black;
        }

.sidebar {
    background-color: #F2E8DC;
    padding: 30px 20px;
    height: auto;
    color: #6B4C3B;
    border-radius: 8px;
  }

  .sidebar h5 {
    font-weight: bold;
    margin-bottom: 20px;
    text-transform: uppercase;
  }

  .sidebar a {
    display: flex; /* Use flexbox for icon-text alignment */
    align-items: center; /* Vertically center icon and text */
    color: #333;
    margin-bottom: 10px;
    text-decoration: none;
    font-weight: 500;
    padding: 10px 15px; /* Consistent padding for alignment */
    border-radius: 5px; /* Slight rounding for visual appeal */
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  .sidebar a:hover {
    color: #B5654B;
    background-color: rgba(181, 101, 75, 0.1); /* Subtle hover background */
  }

  /* Style for sidebar icons */
  .sidebar a i {
    margin-right: 10px;
    font-size: 16px; /* Slightly larger for visibility */
    width: 20px; /* Fixed width for consistent alignment */
    text-align: center; /* Center icon within its space */
    color: #333; /* Match link color */
    transition: color 0.3s ease; /* Smooth hover transition */
  }

  .sidebar a:hover i {
    color: #B5654B; /* Match link hover color */
  }

        .product-detail-section {
            background-color: #FCF4ED;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .product-detail-card {
            background: #fff;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .product-detail-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .product-detail-card img {
            width: 70px;
            height: 90px;
            object-fit: cover;
            border-radius: 6px;
            margin-right: 20px;
        }

        .product-detail-left {
            display: flex;
            align-items: center;
            flex: 1;
        }

        .product-detail-text {
            flex: 1;
        }

        .badge-status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }

        .badge-delivered {
            background-color: #28a745;
            color: #fff;
        }

        .badge-pending {
            background-color: #ffc107;
            color: #000;
        }

        .badge-other {
            background-color: #6B4C3B;
            color: #fff;
        }

        .submit-btn {
            background: linear-gradient(90deg, #B5654B, #D17C63);
            color: white;
            padding: 8px 20px;
            border: none;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 500;
            transition: opacity 0.3s ease, transform 0.2s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-return {
            background: linear-gradient(90deg, #dc3545, #e4606d);
        }

        .btn-cancel {
            background: linear-gradient(90deg, #661820, #8a2c3b);
        }

        .btn-download {
            background: linear-gradient(90deg, #17a2b8, #3bc7d8);
        }

        .submit-btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        footer {
            background-color: #f8f9fa;
            padding: 20px;
        }
    </style>

    <!-- Banner -->
    <section class="hero text-center bg-light p-0 mb-4">
        <div class="banner">
            <img src="/wallpaper/wall4.jpg" alt="Order Details Banner" class="img-fluid w-100">
            <h1>ORDER DETAILS</h1>
        </div>
    </section>

    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-2 sidebar">
        <h5>SETTINGS</h5>
        <a href="/orders" class="<%= currentPath === '/orders' ? 'fw-bold' : '' %>">
          <i class="fas fa-shopping-cart"></i> Orders
        </a>
        <a href="/profile" class="<%= currentPath === '/profile' ? 'fw-bold' : '' %>">
          <i class="fas fa-user"></i> Personal Info
        </a>
        <a href="/addresses" class="<%= currentPath === '/addresses' ? 'fw-bold' : '' %>">
          <i class="fas fa-map-marker-alt"></i> Addresses
        </a>
        <a href="/wallet" class="<%= currentPath === '/wallet' ? 'fw-bold' : '' %>">
          <i class="fas fa-wallet"></i> Wallet
        </a>
      </div>

            <!-- Content Area -->
            <div class="col-md-10 product-detail-section" id="product-detail-section">
                <% if (!order || order.orderedItems.length===0) { %>
                    <p class="text-center text-muted">No order details found.</p>
                    <% } else { %>
                        <h5 class="mb-4 fw-bold">Order #<%= order.orderId %>
                        </h5>
                        <p><strong>Status:</strong>
                            <% if (order.status.trim()==='Delivered' ) { %>
                                <span class="badge-status badge-delivered">DELIVERED</span>
                                <% } else if (order.status.trim()==='Pending' ) { %>
                                    <span class="badge-status badge-pending">PENDING</span>
                                    <% } else { %>
                                        <span class="badge-status badge-other">
                                            <%= order.status.trim().toUpperCase() %>
                                        </span>
                                        <% } %>
                        </p>


                        <% if (order.address && order.address.length> 0) { %>
                            <p><strong>Address:</strong>
                                <%= order.address[0].name %>,
                                    <%= order.address[0].streetAddress %>
                                        <% if (order.address[0].apartment) { %>, <%= order.address[0].apartment %>
                                                <% } %>,
                                                    <%= order.address[0].city %>,
                                                        <%= order.address[0].state %> -
                                                            <%= order.address[0].pincode %><br>
                                                                Phone: <%= order.address[0].phone %>
                                                                    <% if (order.address[0].altPhone) { %><br>Alt Phone:
                                                                        <%= order.address[0].altPhone %>
                                                                            <% } %>
                            </p>
                            <% } else { %>
                                <p><strong>Address:</strong> Not provided</p>
                                <% } %>
                                    <p><strong>Total Price:</strong> ₹<%= order.totalPrice.toFixed(2) %>
                                    </p>
                                    <%if(order.couponApplied){%>
                                        <p><strong>Coupon Applied:</strong>
                                            <%= order.couponApplied %>
                                        </p>
                                        <p><strong>Discount:</strong>
                                            ₹<%= order.discount%>
                                        </p>
                                        <%}%>
                                            <p><strong>Final Amount:</strong> ₹<%= order.finalAmount.toFixed(2) %>
                                            </p>
                                            <p><strong>Order Date:</strong>
                                                <%= order.createdOn.toDateString() %>
                                            </p>
                                            <hr>
                                            <h5 class="mb-3 fw-bold">Ordered Items</h5>
                                            <% order.orderedItems.forEach(item=> { %>
                                                <div class="product-detail-card">
                                                    <div class="product-detail-left">
                                                        <img src="<%= item.product.productImage[0] %>"
                                                            alt="<%= item.product.productName %>">
                                                        <div class="product-detail-text">
                                                            <h6 class="fw-bold">
                                                                <%= item.product.productName %>
                                                            </h6>
                                                            <p>Quantity: <%= item.quantity %> | Price: ₹<%=
                                                                        item.quantity*item.price %> | Status: <%=
                                                                            item.status %> | size : <%=item.size%>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div>
                                                        <% if (item.status.trim()==='Delivered' ) { %>
                                                            <button class="submit-btn btn-return"
                                                                onclick="singleReturned('<%= order._id %>', '<%= item.product._id %>','<%=item.size%>')">RETURN</button>
                                                            <% } else if (item.status.trim()==='Ordered' ) { %>
                                                                <button class="submit-btn btn-cancel"
                                                                    onclick="cancelSingleProduct('<%= item.product._id %>', '<%= order._id %>','<%= item.size%>')">CANCEL</button>
                                                                <% } else if(item.status.trim()==='Return Request' ) {
                                                                    %>
                                                                    <button class="submit-btn ">RETURN
                                                                        REQUESTED</button>
                                                                    <% } else { %>
                                                                        <span class="text-muted"></span>
                                                                        <% } %>
                                                    </div>
                                                </div>
                                                <% }) %>
                                                    <div class="mt-4">
                                                        <a href="/orders" class="submit-btn">← Back to Orders</a>

                                                        <%if(order.status.trim()==='Delivered'){%>

                                                            <button class="btn btn-success mt-2"
                                                                onclick="showDownloadOptions('<%= order.orderId %>')">
                                                                 Download Invoice
                                                            </button>
                                                             <%}%>
                                                    </div>
                                                    <% } %>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

    <script>
        const showSwal = (config) => {
            return Swal.fire({
                ...config,
                confirmButtonColor: "#B5654B",
                cancelButtonColor: "#6B4C3B"
            });
        };

        function cancelSingleProduct(productId, orderId,size) {
            const reasons = [
                "Found a better price elsewhere",
                "Ordered by mistake",
                "No longer needed",
                "Expected delivery time too long",
                "Other"
            ];

            let optionsHtml = reasons.map(reason =>
                `<option value="${reason}">${reason}</option>`
            ).join("");

            Swal.fire({
                title: "Cancel Product",
                html: `
      <p>Select a reason for cancellation:</p>
      <select id="cancel-reason" class="swal2-input">
        <option value="" disabled selected>Select a reason</option>
        ${optionsHtml}
      </select>
            <textarea id="other-reason" class="swal2-textarea" placeholder="Please specify your reason" style="display:none;"></textarea>
    `,
                showCancelButton: true,
                confirmButtonText: "Yes, Cancel it!",

                didOpen: () => {
                    const otherReason = document.getElementById('other-reason')
                    const selectReason = document.getElementById('cancel-reason')

                    selectReason.addEventListener('change', function () {
                        if (this.value === 'Other') {
                            otherReason.style.display = 'block'
                        } else {
                            otherReason.style.display = 'none'
                            otherReason.value = ''
                        }
                    })
                },

                preConfirm: () => {
                    const otherReason = document.getElementById('other-reason').value.trim()
                    const selectedReason = document.getElementById("cancel-reason").value;
                    if (!selectedReason) {
                        Swal.showValidationMessage("Please select a reason.");
                        return false;
                    }
                    if (selectedReason === 'Other') {
                        Swal.showValidationMessage(' Please Enter Custom Reason')
                        return false
                    }
                    return selectedReason === "Other" ? otherReason : selectedReason
                }
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await axios.post('/orders/cancel-item', {
                            productId,
                            orderId,
                            size,
                            reason: result.value
                        });

                        if (response.data.success) {
                            Swal.fire({
                                icon: "success",
                                title: "Cancelled!",
                                text: "Item cancelled successfully.",
                                showConfirmButton: false,
                                timer: 1200
                            }).then(() => location.reload());
                        } else {
                            Swal.fire("Error!", response.data.message || "Cancellation failed.", "error");
                        }
                    } catch (error) {
                        Swal.fire("Oops...", "Something went wrong while cancelling the item.", "error");
                    }
                }
            });
        }

        function singleReturned(orderId, productId,size) {
            const reasons = [
                "Found a better price elsewhere",
                "Order placed by mistake",
                "Item won't arrive on time",
                "Changed my mind",
                "Other"
            ];

            const optionsHtml = reasons.map(reason =>
                `<option value="${reason}">${reason}</option>`
            ).join("");

            Swal.fire({
                title: 'Return Product',
                html: `
            <label for="returnReason">Select a reason:</label>
            <select id="returnReason" class="swal2-input">
                <option value="" disabled selected>Select reason</option>
                ${optionsHtml}
            </select>
                  <textarea id="other-reason" class="swal2-textarea" placeholder="Please specify your reason" style="display:none;"></textarea>
        `,
                showCancelButton: true,
                confirmButtonText: 'Submit',

                didOpen: () => {
                    const otherReason = document.getElementById('other-reason')
                    const selectedReason = document.getElementById('returnReason')

                    selectedReason.addEventListener('change', function () {
                        if (this.value === 'Other') {
                            otherReason.style.display = 'block'
                        }
                        else {
                            otherReason.style.display = 'none'
                            otherReason.value = ''
                        }
                    })
                },

                preConfirm: () => {
                    const otherReason = document.getElementById('other-reason').value.trim()
                    const selectedReason = document.getElementById('returnReason').value;
                    if (!selectedReason) {
                        Swal.showValidationMessage('Please select a return reason');
                        return false
                    }
                    // if (selectedReason === 'Other') {
                    //     Swal.showValidationMessage('Please Enter Custom Reason')
                    //     return false
                    // }
                    return selectedReason === 'Other' ? otherReason : selectedReason
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    axios.patch('/orders/single-Product-Return', {
                        orderId,
                        productId,
                        size,
                        reason: result.value
                    })
                        .then(response => {
                            if (response.data.success) {
                                Swal.fire({
                                    icon: "success",
                                    title: "Product Return Requested!",
                                    text: "Your return request has been submitted.",
                                    showConfirmButton: false,
                                    timer: 1500
                                }).then(() => location.reload());
                            } else {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops!",
                                    text: response.data.message || "Return request failed."
                                })
                            }
                        })
                        .catch(error => {
                            Swal.fire({
                                icon: "error",
                                title: "Oops!",
                                text: "Something went wrong while submitting return request."
                            });
                        });
                }
            });
        }


       function showDownloadOptions(orderId) {
    Swal.fire({
        title: 'Download Invoice',
        text: 'Choose the format to download:',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Excel',
        cancelButtonText: 'PDF',
        showDenyButton: true,
        denyButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            // Excel
            downloadExcel(orderId);
        } else if (result.dismiss === Swal.DismissReason.cancel) {
            // PDF
            window.location.href = `/downloadInvoice?orderId=${orderId}`;
        }
        // If denied, do nothing
    });
}


        function downloadExcel() {
            console.log("Generating Excel");

            const orderData = {
                orderId: "<%= order.orderId %>",
                status: "<%= order.status %>",
                totalPrice: "₹<%= order.totalPrice.toFixed(2) %>",
                finalAmount: "₹<%= order.finalAmount.toFixed(2) %>",
                address: `<% if(order.address && order.address.length > 0) { %>
            <%= order.address[0].name %>, <%= order.address[0].streetAddress %><%= order.address[0].apartment ? ", " + order.address[0].apartment : "" %>, <%= order.address[0].city %>, <%= order.address[0].state %> - <%= order.address[0].pincode %>, Phone: <%= order.address[0].phone %><%= order.address[0].altPhone ? ", Alt Phone: " + order.address[0].altPhone : "" %>
        <% } else { %>
            No address provided
        <% } %>`,
                couponApplied: "<%= order.couponApplied ? 'Yes' : 'No' %>",
                orderDate: "<%= order.createdOn.toDateString() %>",
                orderedItems: [
            <% order.orderedItems.forEach(function (item, index) { %>
                {
                    productName: "<%= item.product.productName %>",
                    quantity: <%= item.quantity %>,
                    price: "₹<%= item.price.toFixed(2) %>",
                    status: "<%= item.status %>"
                } <%= index < order.orderedItems.length - 1 ? ',' : '' %>
            <% }); %>
        ]
        };

        const worksheetData = [
            ["Order ID", orderData.orderId],
            ["Status", orderData.status],
            ["Total Price", orderData.totalPrice],
            ["Final Amount", orderData.finalAmount],
            ["Address", orderData.address],
            ["Coupon Applied", orderData.couponApplied],
            ["Order Date", orderData.orderDate],
            [],
            ["Ordered Items"],
            ["Product Name", "Quantity", "Price", "Status"]
        ];

        orderData.orderedItems.forEach(item => {
            worksheetData.push([
                item.productName,
                item.quantity,
                item.price,
                item.status
            ]);
        });

        const ws = XLSX.utils.aoa_to_sheet(worksheetData);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Order Details");

        // Correct way to download
        XLSX.writeFile(wb, `Order_${orderData.orderId}.xlsx`);
}


        // function downloadPDF() {
        //     console.log("Generating PDF");

        //     const element = document.getElementById('product-detail-section');
        //     html2canvas(element, { scale: 2 }).then(canvas => {
        //         const imgData = canvas.toDataURL('image/jpeg', 1.0);

        //         const { jsPDF } = window.jspdf;
        //         const pdf = new jsPDF('p', 'mm', 'a4');
        //         const pdfWidth = pdf.internal.pageSize.getWidth();
        //         const pdfHeight = pdf.internal.pageSize.getHeight();

        //         const imgProps = {
        //             width: canvas.width,
        //             height: canvas.height
        //         };
        //         const ratio = Math.min(pdfWidth / imgProps.width, pdfHeight / imgProps.height);
        //         const imgWidth = imgProps.width * ratio;
        //         const imgHeight = imgProps.height * ratio;

        //         const x = (pdfWidth - imgWidth) / 2;
        //         const y = 10;

        //         pdf.addImage(imgData, 'JPEG', x, y, imgWidth, imgHeight);
        //         pdf.save('Order_<%= order.orderId %>.pdf');
        //     }).catch(error => {
        //         showSwal({
        //             icon: 'error',
        //             title: 'Oops...',
        //             text: 'Something went wrong while generating the PDF!'
        //         });
        //         console.error("PDF generation error:", error);
        //     });
        // }

    </script>

    <%- include("../../views/partials/userPartial/footer") %>